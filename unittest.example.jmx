<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Example" enabled="true">
      <stringProp name="TestPlan.comments">This is an example unittest, to validate configuration and serve as an example for other unit tests</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="path.resources" elementType="Argument">
            <stringProp name="Argument.name">path.resources</stringProp>
            <stringProp name="Argument.value">${__P(unittest.path.resources)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path.testdata" elementType="Argument">
            <stringProp name="Argument.name">path.testdata</stringProp>
            <stringProp name="Argument.value">${__P(unittest.path.testdata)}/${__P(env,sit)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">${path.testdata}/logins.pttokens.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames"></stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">|</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">x-correlation-id</stringProp>
            <stringProp name="Header.value">${var.correlation_id}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${__P(url.application)}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Clear Extra Details" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">import org.apache.log4j.MDC

// Reset the details MDC object by setting it to an empty map
MDC.put(&quot;details&quot;, [:])
</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate UUID" enabled="true">
        <stringProp name="TestPlan.comments">This needs to create a unique UUID for each request to add to the correlation ID header, and to log afterwards</stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">import org.apache.log4j.MDC

vars.put(&quot;var.correlation_id&quot;, UUID.randomUUID().toString())

// Correlation ID stored as an MDC variable so it can be logged
MDC.put(&quot;correlationId&quot;, vars.get(&quot;var.correlation_id&quot;))
</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Example.Requests" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads.unittests.example.users,2)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(threads.unittests.example.rampup,0)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(threads.unittests.example.duration,60)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${__P(threads.unittests.example.rpm,60)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="GET:Common.ExampleController.ExampleRequestA" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">{
    &quot;userId&quot;:&quot;AA01&quot;,
    &quot;companyId&quot;:&quot;CO881&quot;,
    &quot;country&quot;:&quot;AU&quot;
}
</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProc:GET:Common.ExampleController.ExampleRequestA" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Do nothing</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="PostProc:GET:Common.ExampleController.ExampleRequestA" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.log4j.MDC
import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper()
def response = jsonSlurper.parseText(prev.getResponseDataAsString())

vars.put(&quot;userId&quot;, response.userId)
vars.put(&quot;companyId&quot;, response.companyId)
vars.put(&quot;country&quot;, response.country)

// Add data for MDC for logging
MDC.put(&quot;userId&quot;, vars.get(&quot;userId&quot;))
MDC.put(&quot;companyId&quot;, vars.get(&quot;companyId&quot;))
MDC.put(&quot;country&quot;, vars.get(&quot;country&quot;))

log.debug(&quot;After ExampleA&quot;)
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="POST:Common.ExampleController.ExampleRequestB" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(500,1000)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="PostProc:GET:Common.ExampleController.ExampleRequestB" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.log4j.MDC

// Set number of results
def details = MDC.get(&quot;details&quot;)
// Ordinary we would log the number of items in the JSON result set:
//    details[&quot;r_nr&quot;] = response.Data.size()
// For example purposes, insert a random number
details[&quot;r_nr&quot;] = Math.abs(new Random().nextInt() % 100 + 1)
MDC.put(&quot;details&quot;, details)
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="RecordTimingData" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">// This is called from a JSR223 Listener, rather than a Post-Processor since in
// a Post-Processor, the transaction is not included
// ref https://stackoverflow.com/questions/35012971/how-can-i-get-name-and-other-properties-of-transaction-controller-which-consist

// FIXME TODO This should probably be a custom listener

import org.apache.logging.log4j.Logger
import org.apache.logging.log4j.LogManager
import org.apache.log4j.MDC

import groovy.json.JsonOutput

Logger timing = LogManager.getLogger(&quot;JmeterTimingLogger&quot;)
Logger transaction = LogManager.getLogger(&quot;JmeterTransactionLogger&quot;)

/* Need to use sampleResult to get the transaction information */

/* FIXME TODO Subresults and parent is for embedded elements only. We can&apos;t *easily* get the name of the transaction
 * from it&apos;s nested samples
 */

// These are consistent with the XML log format attributes (ref http://jmeter.apache.org/usermanual/listeners.html#attributes)
// FIXME TODO Not defined as public static since in this Groovy block they are
// outside a class
final String BYTES = &quot;i_by&quot;
final String SENT_BYTES = &quot;i_sby&quot;
final String IDLE_TIME = &quot;i_it&quot;
final String TRANSACTION_NAME = &quot;i_lb&quot;
final String LATENCY = &quot;i_lt&quot;
final String CONNECT_TIME = &quot;i_ct&quot;
final String RESPONSE_CODE = &quot;i_rc&quot;
final String SUCCESS = &quot;i_s&quot;
final String ELAPSED_TIME = &quot;i_t&quot;
final String THREAD_NAME = &quot;i_tn&quot;
final String THREAD_NUM = &quot;i_tnu&quot;
final String GROUP_ACTIVE_THREADS = &quot;i_ng&quot;
final String TEST_ACTIVE_THREADS = &quot;i_na&quot;
final String URL = &quot;i_url&quot;
final String ITERATION_NUMBER = &quot;i_iter&quot;
final String CORRELATION_ID = &quot;i_corr_id&quot;

// These are custom fields
final String GROUP_NAME = &quot;i_gn&quot;
final String USER_ID = &quot;i_uid&quot;
final String COMPANY_ID = &quot;i_cid&quot;
final String DETAILS = &quot;i_det&quot;    // Extra request-specific details

// FIXME TODO Add the following fields: request number

// Common response metadata - note need to wrap constants in () to resolve them
def m = [(USER_ID): MDC.get(&quot;userId&quot;),
         (COMPANY_ID): MDC.get(&quot;companyId&quot;),
         (GROUP_NAME): ctx.getThreadGroup().getName(),
         (THREAD_NAME): sampleResult.getThreadName(),
         (THREAD_NUM): ctx.getThreadNum(),
         (GROUP_ACTIVE_THREADS): sampleResult.getGroupThreads(),
         (TEST_ACTIVE_THREADS): sampleResult.getAllThreads(),
         (TRANSACTION_NAME): sampleResult.getSampleLabel(),
         (ELAPSED_TIME): sampleResult.getTime(),
         (ITERATION_NUMBER): vars.getIteration(),
         (SUCCESS): (sampleResult.isSuccessful() ? &quot;0&quot; : &quot;1&quot;)]

if (sampleEvent.isTransactionSampleEvent()) {
    transaction.info(&quot;{}&quot;, JsonOutput.toJson(m).toString())
} else {
    // Add additional timing-specific fields
    m &lt;&lt; [(URL): sampleResult.getUrlAsString(),
          (RESPONSE_CODE): sampleResult.getResponseCode(),
          (LATENCY): sampleResult.getLatency(),
          (IDLE_TIME): sampleResult.getIdleTime(),
          (CONNECT_TIME): sampleResult.getConnectTime(),
          (BYTES): sampleResult.getBytesAsLong(),
          (SENT_BYTES): sampleResult.getSentBytes(),
          (DETAILS): MDC.get(&quot;details&quot;),
          (CORRELATION_ID): vars.get(&quot;var.correlation_id&quot;)]

    // FIXME TODO Add the following fields: request number

    timing.info(&quot;{}&quot;, JsonOutput.toJson(m).toString())
}
</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="TestPlan.comments">Record timing and transaction data to the log files defined in the log4j2.xml configuration file</stringProp>
      </JSR223Listener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
